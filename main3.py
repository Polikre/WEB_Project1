# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã.
import aiohttp
import main
import logging
import datetime
from telegram.ext import Application, MessageHandler, ConversationHandler, filters
from telegram.ext import CommandHandler
from telegram import ReplyKeyboardMarkup
from random import randint
from data.geocode import get_ll_span
from main import start_

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

name = ""
spis_facult = ["1", "2", "3"]
spis_vyz = main.get_all_university()
spis_need_olymp = ["–í—Å–µ—Ä–æ—Å"]
spis_olymp = main.get_all_olymp()

error_DB = "ERROR. Database not available. Please, write about this Exception to the number 89151771271"
# —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å –Ω–∞–º–∏ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º developers
reply_keyboard_MAIN = [['/USER', '/add', '/lists'],
                       ['/help', '/start', '/all']]
markup_MAIN = ReplyKeyboardMarkup(reply_keyboard_MAIN, one_time_keyboard=False)

reply_keyboard_SPIC = [['/spic_VYZ', '/spic_OLYMP'],
                       ['/help_SPIC', '/main']]
markup_SPIC = ReplyKeyboardMarkup(reply_keyboard_SPIC, one_time_keyboard=False)

reply_keyboard_USER = [['/change_DELTA', '/change_NAME'],
                       ['/help_USER', '/main']]
markup_USER = ReplyKeyboardMarkup(reply_keyboard_USER, one_time_keyboard=False)

reply_keyboard_ADD = [['/spic_VYZ', '/spic_OLYMP'],
                      ['/add_VYZ', '/find_VYZ', "/add_OLYMP", "/del_OLYMP"],
                      ['/help_ADD', '/main']]
markup_ADD = ReplyKeyboardMarkup(reply_keyboard_ADD, one_time_keyboard=False)

reply_keyboard_ALL = [['/help_all'],
                      ['/USER', '/add', '/lists'],
                      ['/help', '/start', '/all'],
                      ['/spic_VYZ', '/spic_OLYMP', '/help_SPIC'],
                      ['/change_DELTA', '/stop', '/help_USER'],
                      ['/add_VYZ', '/add_olymp', '/help_ADD'],
                      ['/main']]
markup_ALL = ReplyKeyboardMarkup(reply_keyboard_ALL, one_time_keyboard=False)


async def start(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!",
        reply_markup=markup_MAIN
    )
    start_(user)


def get_spic_olymp(key):
    '''–ó–î–ï–°–¨ –ù–ï–û–ë–•–û–î–ò–ú–û –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ key –í–´–î–ê–¢–¨ –°–ü–ò–°–û–ö –í–°–ï–• –ù–ê–ó–í–ê–ù–ò–ô –û–õ–ò–ú–ü–ò–ê–î'''
    if key == "all":
        # return list(something)
        # ["–û–ª–∏–º–ø–∏–∞–¥–∞ 1", "...."]
        pass
    elif key == "test":
        return error_DB
    else:
        '''–∏–Ω–∞—á–µ –º—ã 100% –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—É–∑–∞ –∏ —É–∂–µ –ø–æ –Ω–µ–º—É –≤—ã–¥–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—ã (–æ—Ç —ç—Ç–æ–≥–æ)/(–Ω—É–∂–Ω—ã–µ —ç—Ç–æ–º—É) –≤—É–∑–∞/—É'''
        # return list(something)
        pass


def get_spic_VYZ(key):
    pass


async def _help_(update, context):
    user = update.effective_user
    await update.message.reply_html(
        rf"""–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –í–£–ó –≤ –ú–æ—Å–∫–≤–µ. –ò—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–∞–Ω–µ–ª–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ: 
        1) –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –í–£–ó–∞—Ö –ú–æ—Å–∫–≤—ã
        2) –í—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –∏ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã 
            –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–µ–≥–æ
        3) –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–∏—á–Ω—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ–ª–∏–º–ø–∏–∞–¥""")


async def help_ADD(update, context):
    await update.message.reply_html(
        rf"""üìö –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—É–∑: /set_VYZ

        –ü–æ–º–Ω–∏—Ç–µ - –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –≤—ã–±–æ—Ä –º–æ–∂–Ω–æ –≤—Å–µ–≥–¥–∞!

        –¢–∞–∫–∂–µ –º—ã —Å–æ–±—Ä–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–£–ó–æ–≤ –ú–æ—Å–∫–≤—ã,
         –∫–æ—Ç–æ—Ä—ã–π –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /spic_VYZ! üéì""")


async def help_SPIC(update, context):
    await update.message.reply_html(
        rf"""üè´ –ü–æ –∫–æ–º–∞–Ω–¥–µ /spic_VYZ –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–£–ó–æ–≤ –ú–æ—Å–∫–≤—ã, –≤ –±—É–¥—É—â–µ–º —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö.
üë®‚Äçüéì –ê –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ /spic_OLYMP –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥""")


async def help_USER(update, context):
    user = update.effective_user
    await update.message.reply_html(
        rf'''üö© {user.mention_html()}, —ç—Ç–æ –í–∞—à–µ –ª–∏—á–Ω–æ–µ –õ–æ–±–±–∏, –≥–¥–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –ª–∏—á–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—É–∑–µ, –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫ –∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –º–µ–∂–¥—É "–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞–º–∏"''')


async def help_SET(update, context):
    user = update.effective_user
    await update.message.reply_html(
        rf'''‚åõ –ö–æ–º–∞–Ω–¥—ã /set_OLYMP –∏ /change_DELTA
–ü–æ–º–æ–≥–∞—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–Ω–µ—É—Ä–æ—á–Ω—É—é –æ–ª–∏–º–ø–∏–∞–¥—É –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –º–µ–∂–¥—É "–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞–º–∏"''')


async def help_all(update, context):
    user = update.effective_user
    await update.message.reply_html(
        rf'''ü§î {user.mention_html()}, –µ—Å–ª–∏ —Ç—ã –∑–∞–±—ã–ª/–∞ –æ –∑–Ω–∞—á–µ–Ω–∏–∏ –∫–∞–∫–æ–π –ª–∏–±–æ –∫–Ω–æ–ø–∫–µ, –ª–∏–±–æ –∂–µ —Ç—ã —Ç—É—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, —Ç–æ —Ä–∞–∑–¥–µ–ª ALL —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ–±—è!
–í –Ω–∞—à–µ–º –±–æ—Ç–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞ –∏ –æ–¥–∏–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π:
    ~ /MAIN - –æ—Å–Ω–æ–≤–Ω–æ–π, –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    ~ /USER - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ –∏ —Ç–≤–æ–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö, –≤—É–∑–∞—Ö –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞—Ö
    ~ /add - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –í–£–ó–æ–≤ –∏ –æ–ª–∏–º–ø–∏–∞–¥ –≤ —Ä–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π
    ~ /lists - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –±–æ—Ç–µ –í–£–ó–æ–≤ –∏ –æ–ª–∏–º–ø–∏–∞–¥
    –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª - 
    ~ /all - —Ä–∞–∑–¥–µ–ª —Å–æ –≤—Å–µ–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏

‚ùó–ü–û–î–†–û–ë–ù–ï–ï –û –†–ê–ó–î–ï–õ–ê–• –ú–û–ñ–ù–û –£–ó–ù–ê–¢–¨, –ü–ï–†–ï–ô–î–Ø –í –ù–ò–• –ò –í–´–ë–†–ê–í –ö–û–ú–ê–ù–î–£ –¢–ò–ü–ê /help_(–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞)‚ùó
–ö–æ–º–∞–Ω–¥—ã:
    ~ /help - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ MAIN)
    ~ /start - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
    ~ /spic_VYZ - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–£–ó–æ–≤, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ –ë–î
    ~ /spic_OLYMP - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ –ë–î
    ~ /change_DELTA - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –æ–ª–∏–º–ø–∏–∞–¥–µ
    ~ /add_VYZ - –¥–æ–±–∞–≤–ª—è–µ—Ç –í–£–ó –≤ —Ä–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π
    ~ /add_OLYMP - –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–ª–∏–º–ø–∏–∞–¥—É –≤ —Ä–∞–∑–¥–µ–ª —Ü–µ–ª–µ–π
''')


async def stop(update, context):
    await update.message.reply_html("Stop")


async def _main_(update, context):
    await update.message.reply_html(
        rf"–ó–∞–≥—Ä—É–∑–∫–∞ ...",
        reply_markup=markup_MAIN
    )


# --------------------------------------------------------------------------------------------------
async def find_VYZ(update, context):
    await update.message.reply_html("–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –≤—É–∑–∞ –∏ —É–≤–∏–¥–∏—à—å –µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    return 1


async def geocoder(update, context):
    try:
        geocoder_uri = "http://geocode-maps.yandex.ru/1.x/?apikey=40d1649f-0493-4b70-98ba-98533de7710b&geocode="
        response = await get_response(geocoder_uri + update.message.text + "&format=json")

        toponym = response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
        print(toponym)
        ll, spn = get_ll_span(toponym)
        # –ú–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π,
        # –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥–ª–∞–≥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –Ω–∞ —É—Ä–æ–∫–∞—Ö, –ø–æ—Å–≤—è—â—ë–Ω–Ω—ã—Ö HTTP-–≥–µ–æ–∫–æ–¥–µ—Ä—É.

        static_api_request = f"http://static-maps.yandex.ru/1.x/?ll={ll}&spn={spn}&l=map"
        await context.bot.send_photo(
            update.message.chat_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –ö—É–¥–∞ –ø–æ—Å—ã–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
            # –°—Å—ã–ª–∫–∞ –Ω–∞ static API, –ø–æ —Å—É—Ç–∏, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.
            # –¢–µ–ª–µ–≥—Ä–∞–º—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä—è–º–æ –µ—ë, –Ω–µ —Å–∫–∞—á–∏–≤–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç—É.
            static_api_request,
            caption="–ù–∞—à—ë–ª:"
        )
    except Exception:
        pass
    return ConversationHandler.END


async def get_response(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            return await resp.json()


async def add_OLYMP(update, context):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ª–∏–º–ø–∏–∞–¥—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
    return 1


async def add_OLYMP_2(update, context):
    olymp = update.message.text
    if olymp in spis_olymp:
        main.add_olymp(olymp, 1, 1, 1, "")
        if olymp not in spis_need_olymp:
            await update.message.reply_text(
                "–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥–∞, –Ω–µ –≤–ª–∏—è—é—â–∞—è –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π –≤—É–∑. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë, –Ω–∞–∂–º–∏ /del_OLYMP, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–∂–º–∏ /change_DELTA")
        else:
            await update.message.reply_text(
                "–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω—É–∂–Ω–∞—è —Ç–µ–±–µ –æ–ª–∏–º–ø–∏–∞–¥–∞. –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë, –Ω–∞–∂–º–∏ /del_OLYMP, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–∂–º–∏ /change_DELTA")
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –æ —Ç–∞–∫–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ. –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥, –Ω–∞–∂–∞–≤ /spis_OLYMP")
        return ConversationHandler.END


# ------------------------------------------------------------------------------

async def del_OLYMP(update, context):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ª–∏–º–ø–∏–∞–¥—É, –∫–æ—Ç–æ—Ä—É—é –•–û–ß–ï–®–¨ –£–î–ê–õ–ò–¢–¨")
    return 1


async def del_OLYMP_2(update, context):
    olymp = update.message.text
    if olymp in spis_olymp:
        main.user_olymp_delete(olymp, cur_user=update.effective_user)
        if olymp not in spis_need_olymp:
            await update.message.reply_text(
                "–£–¥–∞–ª–µ–Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥–∞, –Ω–µ –≤–ª–∏—è—é—â–∞—è –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π –≤—É–∑. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë, –Ω–∞–∂–º–∏ /add_OLYMP")
        else:
            await update.message.reply_text(
                "–£–¥–∞–ª–µ–Ω–∞ –Ω—É–∂–Ω–∞—è —Ç–µ–±–µ –æ–ª–∏–º–ø–∏–∞–¥–∞. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—ë, –Ω–∞–∂–º–∏ /add_OLYMP, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–∂–º–∏ /change_DELTA")
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –æ —Ç–∞–∫–æ–π –æ–ª–∏–º–ø–∏–∞–¥–µ. –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥, –Ω–∞–∂–∞–≤ /spis_OLYMP")
        return ConversationHandler.END


async def del_VYZ(update, context):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤—É–∑, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å")
    return 1


async def del_VYZ_2(update, context):
    global vyz
    vyz = update.message.text
    if vyz in spis_vyz:
        main.user_university_delete(vyz, cur_user=update.effective_user)
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–∞—Ç—å /stop")
        return 2

    else:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –æ —Ç–∞–∫–æ–º –≤—É–∑–µ. –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –≤—É–∑–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ /spic_VYZ. ")
        return ConversationHandler.END


# ------------------------------------------------------------------------------

async def add_VYZ(update, context):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤—É–∑, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–æ—Å—Ç—É–ø–∏—Ç—å –∏ –≤ —Å–∫–æ–±–∫–∞—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
    return 1


async def add_VYZ_2(update, context):
    global vyz
    vyz = update.message.text
    if vyz.split("(")[0] in spis_vyz:
        main.user_university_add(vyz, cur_user=update.effective_user)
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –≤—É–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω")
        return ConversationHandler.END

    else:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –æ —Ç–∞–∫–æ–º –≤—É–∑–µ. –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –≤—É–∑–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ /spic_VYZ. ")
        return ConversationHandler.END


async def add_VYZ_3(update, context):
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤, –Ω–∞–∂–∞–≤ /spis_need_olymp")
    return ConversationHandler.END


# ------------------------------------------------------------------------------

async def change_DELTA(update, context):
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –∏ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ –Ω–µ–π –Ω–∞–ø–æ–º–Ω–∏—Ç—å")
    return 0


async def change_DELTA_2(update, context):
    # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    await update.message.reply_text("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    return ConversationHandler.END


# ------------------------------------------------------------------------------


async def spic_VYZ(update, context):
    user = update.effective_user
    await update.message.reply_html(
        rf"{user.mention_html()}, –æ–∂–∏–¥–∞–π—Ç–µ. –°–µ–π—á–∞—Å —è –≤—ã–≤–µ–¥—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–£–ó–æ–≤ –Ω–∏–∂–µ:",
    )
    await update.message.reply_html(rf'{main.get_all_university()}')


async def spic_OLYMP(update, context):
    user = update.effective_user
    await update.message.reply_html(
        rf"{user.mention_html()}, –æ–∂–∏–¥–∞–π—Ç–µ. –°–µ–π—á–∞—Å —è –≤—ã–≤–µ–¥—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥ –Ω–∏–∂–µ:",
    )
    await update.message.reply_html(rf'{main.get_all_olymp()}')


async def add(update, context):
    await update.message.reply_html(
        rf"–ó–∞–≥—Ä—É–∑–∫–∞ ...",
        reply_markup=markup_ADD
    )


async def lists(update, context):
    await update.message.reply_html(
        rf"–ó–∞–≥—Ä—É–∑–∫–∞ ...",
        reply_markup=markup_SPIC
    )


async def _all_(update, context):
    await update.message.reply_html(
        rf"–ó–∞–≥—Ä—É–∑–∫–∞ ...",
        reply_markup=markup_ALL
    )
    await update.message.reply_html(
        rf"üìö –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —É–∑–Ω–∞—Ç—å –æ –∑–Ω–∞—á–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –º–æ–∂–µ—à—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help_all"
    )


async def USER(update, context):
    await update.message.reply_html(
        rf"–ó–∞–≥—Ä—É–∑–∫–∞ ...",
        reply_markup=markup_USER
    )


def main1():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application.
    # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω
    application = Application.builder().token("6015537560:AAGF7yrC-4QnR4DtbFh78GplDpMD1YDqSt4").build()

    application.add_handler(CommandHandler("help", _help_))
    application.add_handler(CommandHandler("help_ADD", help_ADD))
    application.add_handler(CommandHandler("help_SPIC", help_SPIC))
    application.add_handler(CommandHandler("help_USER", help_USER))
    application.add_handler(CommandHandler("help_SET", help_SET))
    application.add_handler(CommandHandler("help_all", help_all))

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add))
    application.add_handler(CommandHandler("main", _main_))
    application.add_handler(CommandHandler("lists", lists))
    application.add_handler(CommandHandler("all", _all_))

    # application.add_handler(CommandHandler("add_OLYMP", add_OLYMP))
    # application.add_handler(CommandHandler("add_VYZ", add_VYZ))

    # application.add_handler(CommandHandler("add_VYZ", change_VYZ))
    # application.add_handler(CommandHandler("change_DELTA", change_DELTA))
    # application.add_handler(CommandHandler("change_NAME", change_NAME))

    application.add_handler(CommandHandler("spic_VYZ", spic_VYZ))
    application.add_handler(CommandHandler("spic_OLYMP", spic_OLYMP))

    application.add_handler(CommandHandler("USER", USER))

    conv1 = ConversationHandler(
        entry_points=[CommandHandler('change_DELTA', change_DELTA)],
        states={
            0: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_DELTA_2)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(conv1)

    conv2 = ConversationHandler(
        entry_points=[CommandHandler('add_VYZ', add_VYZ)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_VYZ_2)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(conv2)

    conv3 = ConversationHandler(
        entry_points=[CommandHandler('del_OLYMP', del_OLYMP)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, del_OLYMP_2)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(conv3)

    conv4 = ConversationHandler(
        entry_points=[CommandHandler('add_OLYMP', add_OLYMP)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_OLYMP_2)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    application.add_handler(conv4)

    conv5 = ConversationHandler(
        entry_points=[CommandHandler('find_VYZ', find_VYZ)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, geocoder)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(conv5)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()
